{"ast":null,"code":"var _jsxFileName = \"/Users/eftelyasivridag/Desktop/Doctor-Patient-Portal/frontend/src/components/PatientRegister.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { GoogleOAuthProvider, GoogleLogin } from \"@react-oauth/google\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../styles/DoctorLogin.css\"; // ✅ Using the same CSS as doctor login\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PatientRegister = () => {\n  _s();\n  const navigate = useNavigate();\n  const [email, setEmail] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const API_URL = process.env.NEXT_PUBLIC_BACKEND_URL;\n  const clientId = process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID;\n\n  // ✅ Handle Google Registration\n  const handleGoogleSuccess = async response => {\n    if (!response.credential) {\n      console.error(\"Google registration failed: No credential received\");\n      return;\n    }\n    const googleToken = response.credential;\n    console.log(\"Google Token Received:\", googleToken);\n    try {\n      const res = await fetch(`${API_URL}/api/patients/loginPatient/google`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          token: googleToken\n        })\n      });\n      const data = await res.json();\n      console.log(\"Backend Response:\", data);\n      if (res.ok) {\n        localStorage.setItem(\"patientToken\", data.token);\n        navigate(\"/patient-dashboard\");\n      } else {\n        setError(data.message || \"Google Registration Failed\");\n      }\n    } catch (err) {\n      setError(\"Google Authentication Failed\");\n    }\n  };\n\n  // ✅ Handle Manual Registration\n  const handleManualRegister = async e => {\n    e.preventDefault();\n    try {\n      const res = await fetch(`${API_URL}/api/patients/registerPatient`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email,\n          username,\n          password\n        })\n      });\n      const data = await res.json();\n      if (res.ok) {\n        localStorage.setItem(\"patientToken\", data.token);\n        navigate(\"/patient-dashboard\");\n      } else {\n        setError(data.message || \"Registration Failed\");\n      }\n    } catch (err) {\n      console.error(\"Registration Error:\", err);\n      setError(\"Server Error. Please try again.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(GoogleOAuthProvider, {\n    clientId: clientId,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Patient Registration\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 27\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleManualRegister,\n        className: \"login-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          placeholder: \"Email\",\n          value: email,\n          onChange: e => setEmail(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Username\",\n          value: username,\n          onChange: e => setUsername(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"Password\",\n          value: password,\n          onChange: e => setPassword(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"divider\",\n        children: \"OR\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GoogleLogin, {\n        onSuccess: handleGoogleSuccess,\n        onError: () => setError(\"Google Registration Failed\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Already have an account? \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => navigate(\"/patient-login\"),\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 45\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n_s(PatientRegister, \"MTiV4WmZh/7NTBIDYDa8yD8GeLo=\", false, function () {\n  return [useNavigate];\n});\n_c = PatientRegister;\nexport default PatientRegister;\nvar _c;\n$RefreshReg$(_c, \"PatientRegister\");","map":{"version":3,"names":["React","useState","GoogleOAuthProvider","GoogleLogin","useNavigate","jsxDEV","_jsxDEV","PatientRegister","_s","navigate","email","setEmail","username","setUsername","password","setPassword","error","setError","API_URL","process","env","NEXT_PUBLIC_BACKEND_URL","clientId","NEXT_PUBLIC_GOOGLE_CLIENT_ID","handleGoogleSuccess","response","credential","console","googleToken","log","res","fetch","method","headers","body","JSON","stringify","token","data","json","ok","localStorage","setItem","message","err","handleManualRegister","e","preventDefault","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","required","onSuccess","onError","onClick","_c","$RefreshReg$"],"sources":["/Users/eftelyasivridag/Desktop/Doctor-Patient-Portal/frontend/src/components/PatientRegister.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { GoogleOAuthProvider, GoogleLogin } from \"@react-oauth/google\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../styles/DoctorLogin.css\"; // ✅ Using the same CSS as doctor login\n\nconst PatientRegister = () => {\n    const navigate = useNavigate();\n    const [email, setEmail] = useState(\"\");\n    const [username, setUsername] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [error, setError] = useState(\"\");\n    const API_URL = process.env.NEXT_PUBLIC_BACKEND_URL;\n    const clientId = process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID;\n\n    // ✅ Handle Google Registration\n    const handleGoogleSuccess = async (response) => {\n        if (!response.credential) {\n            console.error(\"Google registration failed: No credential received\");\n            return;\n        }\n\n        const googleToken = response.credential;\n        console.log(\"Google Token Received:\", googleToken);\n\n        try {\n            const res = await fetch(`${API_URL}/api/patients/loginPatient/google`, {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify({ token: googleToken })\n            });\n\n            const data = await res.json();\n            console.log(\"Backend Response:\", data);\n\n            if (res.ok) {\n                localStorage.setItem(\"patientToken\", data.token);\n                navigate(\"/patient-dashboard\");\n            } else {\n                setError(data.message || \"Google Registration Failed\");\n            }\n        } catch (err) {\n            setError(\"Google Authentication Failed\");\n        }\n    };\n\n    // ✅ Handle Manual Registration\n    const handleManualRegister = async (e) => {\n        e.preventDefault();\n\n        try {\n            const res = await fetch(`${API_URL}/api/patients/registerPatient`, {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify({ email, username, password })\n            });\n\n            const data = await res.json();\n            if (res.ok) {\n                localStorage.setItem(\"patientToken\", data.token);\n                navigate(\"/patient-dashboard\");\n            } else {\n                setError(data.message || \"Registration Failed\");\n            }\n        } catch (err) {\n            console.error(\"Registration Error:\", err);\n            setError(\"Server Error. Please try again.\");\n        }\n    };\n\n    return (\n        <GoogleOAuthProvider clientId={clientId}>\n            <div className=\"login-container\"> \n                <h2>Patient Registration</h2>\n\n                {error && <p className=\"error\">{error}</p>}\n\n                <form onSubmit={handleManualRegister} className=\"login-form\">\n                    <input \n                        type=\"email\" \n                        placeholder=\"Email\" \n                        value={email} \n                        onChange={(e) => setEmail(e.target.value)} \n                        required\n                    />\n                    <input \n                        type=\"text\" \n                        placeholder=\"Username\" \n                        value={username} \n                        onChange={(e) => setUsername(e.target.value)} \n                        required\n                    />\n                    <input \n                        type=\"password\" \n                        placeholder=\"Password\" \n                        value={password} \n                        onChange={(e) => setPassword(e.target.value)} \n                        required\n                    />\n                    <button type=\"submit\">Register</button>\n                </form>\n\n                <div className=\"divider\">OR</div>\n\n                <GoogleLogin onSuccess={handleGoogleSuccess} onError={() => setError(\"Google Registration Failed\")} />\n\n                <p>Already have an account? <button onClick={() => navigate(\"/patient-login\")}>Login</button></p>\n            </div>\n        </GoogleOAuthProvider>\n    );\n};\n\nexport default PatientRegister;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}