{"ast":null,"code":"var _jsxFileName = \"/Users/eftelyasivridag/Desktop/Doctor-Patient-Portal/frontend/src/components/PatientLogin.js\",\n  _s = $RefreshSig$();\nimport { GoogleOAuthProvider, GoogleLogin } from \"@react-oauth/google\";\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../styles/DoctorLogin.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PatientLogin = () => {\n  _s();\n  const navigate = useNavigate();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const API_URL = process.env.NEXT_PUBLIC_BACKEND_URL;\n  const clientId = \"934186764034-hob9fe241h4ltkql4j3dukl8h8qc5pa0.apps.googleusercontent.com\";\n\n  // ✅ Handle Google Login\n  const handleGoogleSuccess = async response => {\n    if (!response.credential) {\n      console.error(\"Google login failed: No credential received\");\n      return;\n    }\n    const googleToken = response.credential;\n    console.log(\"Google Token Received:\", googleToken);\n    try {\n      const res = await fetch(`${API_URL}/loginPatient/google`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          token: googleToken\n        })\n      });\n      const data = await res.json();\n      console.log(\"Backend Response:\", data);\n      if (res.ok) {\n        localStorage.setItem(\"patientToken\", data.token);\n        navigate(\"/patient-dashboard\");\n      } else {\n        console.error(\"Google Login Failed:\", data.message);\n        setError(data.message || \"Google Login Failed\");\n      }\n    } catch (err) {\n      console.error(\"Google Login Error:\", err);\n      setError(\"Google Authentication Failed\");\n    }\n  };\n\n  // ✅ Handle Manual Login\n  const handleManualLogin = async e => {\n    e.preventDefault();\n    try {\n      const res = await fetch(`${API_URL}/loginPatient/manual`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const data = await res.json();\n      if (res.ok) {\n        localStorage.setItem(\"patientToken\", data.token);\n        navigate(\"/patient-dashboard\");\n      } else {\n        setError(data.message || \"Invalid Credentials\");\n      }\n    } catch (err) {\n      console.error(\"Manual Login Error:\", err);\n      setError(\"Server Error. Please try again.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(GoogleOAuthProvider, {\n    clientId: clientId,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Patient Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 27\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleManualLogin,\n        className: \"login-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          placeholder: \"Email\",\n          value: email,\n          onChange: e => setEmail(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"Password\",\n          value: password,\n          onChange: e => setPassword(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"divider\",\n        children: \"OR\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GoogleLogin, {\n        onSuccess: handleGoogleSuccess,\n        onError: () => setError(\"Google Login Failed\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Don't have an account? \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => navigate(\"/patient-register\"),\n          children: \"Register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 43\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n_s(PatientLogin, \"I5nlxnySThrFynfg0b4CBLAO5h0=\", false, function () {\n  return [useNavigate];\n});\n_c = PatientLogin;\nexport default PatientLogin;\nvar _c;\n$RefreshReg$(_c, \"PatientLogin\");","map":{"version":3,"names":["GoogleOAuthProvider","GoogleLogin","useState","useNavigate","jsxDEV","_jsxDEV","PatientLogin","_s","navigate","email","setEmail","password","setPassword","error","setError","API_URL","process","env","NEXT_PUBLIC_BACKEND_URL","clientId","handleGoogleSuccess","response","credential","console","googleToken","log","res","fetch","method","headers","body","JSON","stringify","token","data","json","ok","localStorage","setItem","message","err","handleManualLogin","e","preventDefault","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","required","onSuccess","onError","onClick","_c","$RefreshReg$"],"sources":["/Users/eftelyasivridag/Desktop/Doctor-Patient-Portal/frontend/src/components/PatientLogin.js"],"sourcesContent":["import { GoogleOAuthProvider, GoogleLogin } from \"@react-oauth/google\";\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../styles/DoctorLogin.css\";\n\nconst PatientLogin = () => {\n    const navigate = useNavigate();\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [error, setError] = useState(\"\");\n    const API_URL = process.env.NEXT_PUBLIC_BACKEND_URL;\n    const clientId = \"934186764034-hob9fe241h4ltkql4j3dukl8h8qc5pa0.apps.googleusercontent.com\";\n\n    // ✅ Handle Google Login\n    const handleGoogleSuccess = async (response) => {\n        if (!response.credential) {\n            console.error(\"Google login failed: No credential received\");\n            return;\n        }\n    \n        const googleToken = response.credential;\n        console.log(\"Google Token Received:\", googleToken);\n    \n        try {\n            const res = await fetch(`${API_URL}/loginPatient/google`, {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify({ token: googleToken })\n            });\n    \n            const data = await res.json();\n            console.log(\"Backend Response:\", data);\n    \n            if (res.ok) {\n                localStorage.setItem(\"patientToken\", data.token);\n                navigate(\"/patient-dashboard\");\n            } else {\n                console.error(\"Google Login Failed:\", data.message);\n                setError(data.message || \"Google Login Failed\");\n            }\n        } catch (err) {\n            console.error(\"Google Login Error:\", err);\n            setError(\"Google Authentication Failed\");\n        }\n    };\n    \n    // ✅ Handle Manual Login\n    const handleManualLogin = async (e) => {\n        e.preventDefault();\n        try {\n            const res = await fetch(`${API_URL}/loginPatient/manual`, {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify({ email, password })\n            });\n\n            const data = await res.json();\n            if (res.ok) {\n                localStorage.setItem(\"patientToken\", data.token);\n                navigate(\"/patient-dashboard\");\n            } else {\n                setError(data.message || \"Invalid Credentials\");\n            }\n        } catch (err) {\n            console.error(\"Manual Login Error:\", err);\n            setError(\"Server Error. Please try again.\");\n        }\n    };\n\n    return (\n        <GoogleOAuthProvider clientId={clientId}>\n            <div className=\"login-container\">\n                <h2>Patient Login</h2>\n\n                {error && <p className=\"error\">{error}</p>}\n\n                <form onSubmit={handleManualLogin} className=\"login-form\">\n                    <input \n                        type=\"email\" \n                        placeholder=\"Email\" \n                        value={email} \n                        onChange={(e) => setEmail(e.target.value)} \n                        required\n                    />\n                    <input \n                        type=\"password\" \n                        placeholder=\"Password\" \n                        value={password} \n                        onChange={(e) => setPassword(e.target.value)} \n                        required\n                    />\n                    <button type=\"submit\">Login</button>\n                </form>\n\n                <div className=\"divider\">OR</div>\n\n                <GoogleLogin onSuccess={handleGoogleSuccess} onError={() => setError(\"Google Login Failed\")} />\n\n                <p>Don't have an account? <button onClick={() => navigate(\"/patient-register\")}>Register</button></p>\n            </div>\n        </GoogleOAuthProvider>\n    );\n};\n\nexport default PatientLogin;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}